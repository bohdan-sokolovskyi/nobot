// Copyright (c) 2021 Bohdan Sokolovskyi
// Author: Bohdan Sokolovskyi <sokol.chemist@gmail.com>


########################### FOR PARSER ###########################

<script> ::= <compiler-options> <bot-declaration>

<compiler-options> ::= <compiler-option> <compiler-options>
                       | <empty>

<compiler-option> ::= <compiler-option-name> <string-or-number> ';'

<compiler-option-name> ::= '@codegen'
                           | '@platform'
                           | '@arch-type'

<bot-declaration> ::= 'bot' '{'
                                <bot-options>
                                <var-declarations>
                                <start-from-stmt>
                                <state-points-declarations>
                                <state-actions-declarations>
                      '}'

<bot-options> ::= 'options' '{' <bot-options-list> '}'

<bot-options-list> ::= <bot-option> <bot-options-list>
                       | <empty>

<bot-option> ::= <id> ':' <string-or-number> ';'

<var-declarations> ::= 'vars' '{' <var-decls-list> '}'
                       | <empty>

<var-decls-list> ::= <var-decl> <var-decls-list>
                     | <empty>


<var-decl> ::= <id> ':' <literal> ';'

<start-from-stmt> ::= 'start' 'from' <id> ';'

<state-points-declarations> ::= 'state-points' '{' <state-points-decls> '}'

<state-points-decls> ::= <state-point-decl> <state-points-decls>
                         | <empty>

<state-point-decl> ::= <id> ':' '{' <state-point-options> '}'

<state-point-options> ::= <state-point-option> <state-point-options>
                          | <empty>

<state-point-option> ::= <id> ':' <id> ';'

<state-actions-declarations> ::= 'state-actions' '{' <state-actions-decls> '}'

<state-actions-decls> ::= <state-decl> <state-actions-decls>
                          | <empty>

<state-decl> ::= <id> ':' '{' <stmt-list> '}'

<stmt-list> ::= <stmt> <stmt-list>
                | <empty>

<stmt> ::= <if-stmt>
           | <expr> ';'

<expr> ::= <gotov-expr>
           | <say-expr>
           | <save-to-expr>

<gotov-expr> ::= 'gotov' <gotov-arg>

<gotov-arg> ::= <id>
                | 'self'

<say-expr> ::= 'say' <say-expr-args>

<say-expr-args> ::= <say-expr-arg> <rest-say-expr-args>

<say-expr-arg> ::= <char-string>
                   | <number-string>
                   | <id>
                   | '?input'

<rest-say-expr-args> ::= <say-expr-arg> <rest-say-expr-args>
                         | <empty>

<save-to-expr> ::= 'save' <literal-or-id-or-input> 'to' <id>

<if-stmt> ::= 'if' <cond-expr> '{' <stmt-list> '}' <else-block>

<else-block> ::= 'else' '{' <stmt-list> '}'
                 | <empty>

<cond-expr> ::= <logic-expr>

<logic-expr> ::= <equal-expr>
                 | <in-expr>

<equal-expr> ::= <eq-sub-expr> '==' <eq-sub-expr>

<in-expr> ::= <left-in-expr> in <right-in-expr>

<left-in-expr> ::= <char-string>
                   | <id>
                   | <number-string>
                   | '?input'

<right-in-expr> ::= <char-string>
                    | <item-list>
                    | '?input'

<eq-sub-expr> ::= <id>
               | <number-string>
               | <char-string>
               | '?input'
               
<literal-or-id-or-input> ::= <literal>
                    | <id>
                    | '?input'

<string-or-number> ::= <char-string>
                       | <number-string>

<literal> ::= <char-string>
              | <number-string>
              | <item-list>
              | 'none'

<item-list> ::= '[' <literal-list> ']'

<literal-list> ::= <literal> <rest-literal-list>
                   | <empty>

<rest-literal-list> ::= ',' <literal> <rest-literal-list>
                        | <empty>


########################### FOR LEXER ###########################

<char-string> ::= '"' <char-list> '"'

<char-list> ::= <char> <char-list> |
                <empty>

<id> ::= <letter> <char-string>

<char-string> ::= <letter> <char-string> |
                  <number> <char-string> |
                  '-' <char-string> |
                  <emtpy>

<number--string> ::= <number> <number-string>
                 <empty>

<letter> ::= [a-z | A-Z]

<number> ::= [0-9]

<empty> ::= empty

<single-comment> ::= '//' ...

<multi-comment> ::= '/*' ... '*/'
