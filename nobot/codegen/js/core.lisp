;;;; Copyright (c) 2021 Bohdan Sokolovskyi
;;;; Author: Bohdan Sokolovskyi <sokol.chemist@gmail.com>


(uiop:define-package :nobot/codegen/js/core
    (:use :cl
          :nobot/codegen/js/form-factor)
  (:import-from :nobot/toplevel/context
                #:*context*
                #:get-projectgen-result
                #:get-post-processing-result)
  (:import-from :nobot/codegen/utils
                #:with-new-file
                #:$file-stream)
  (:import-from :nobot/projectgen/common
                #:projectgen-info)
  (:import-from :nobot/botscript/post
                #:botscript-post-process-info)
  (:import-from :nobot/codegen/top
                #:generate-output-code))

(in-package :nobot/codegen/js/core)

(defvar *project-path*)
(defvar *post-process-result*)
(defvar *projectgen-result*)

(defmethod generate-output-code ((post-processing-result botscript-post-process-info)
                                 (projectgen-result )
                                 (lang (eql :js)))
  (let ((*project-path* project-path))
    (generate-index-file)))

(defun generate-index-file ()
  (with-new-file (*project-path* "index" :js)
    (with-build-output ($file-stream)
      (generate-header)
      (build-require-stmt "wisteria" "./wisteria")
      (generate-bot-options-instance)
      (generate-bot-instance))))

(defun generate-js-tree ()
  )

;;TODO: generate comment with full description about project
(defun generate-header ()
  (build-multi-comment
   "Source code of bot generated by NOBOT")
  (build-strict-expr))

(defun generate-bot-instance ()
  (build-storage
   "bot"
   :const
   :as-expression (build-new-instance-expr
                   (build-chain-call
                    `("wisteria"
                      ,(build-call-fun-expr
                        "Bot"
                        :stream nil))
                    :stream nil)
                   :stream nil)))

(defun generate-bot-options-instance ()
  (build-storage-location
   "botOptions"
   :const
   :as-expression (build-new-instance-expr
                   (build-chain-call
                    `(,(build-call-fun-expr
                        "Bot"
                        '("BotOptions")
                        :stream nil))
                    :stream nil)
                   :stream nil)))


