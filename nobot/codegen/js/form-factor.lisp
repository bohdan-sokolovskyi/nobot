;;;; Copyright (c) 2021 Bohdan Sokolovskyi
;;;; Author: Bohdan Sokolovskyi <sokol.chemist@gmail.com>


(uiop:define-package :nobot/codegen/js/form-factor
    (:use :cl)
  (:import-from :anaphora
                #:aif
                #:it)
  (:import-from :nobot/utils
                #:to-string)
  (:export #:with-build-output
           ;; builder from pattern
           #:build-require-stmt
           #:build-chain-call
           ;; base builder
           #:build-new-instance-expr
           #:build-multi-comment
           #:build-new-line
           #:build-strict-expr
           #:build-call-fun-expr
           #:build-storage-location
           #:build-str-literal))

(in-package :nobot/codegen/js/form-factor)

(defvar *stream*)

(defmacro with-build-output ((stream) &body body)
  `(let ((*stream* ,stream))
     ,@body))

;;;;;;;;;;;;;;;;;;;;;; js code printer ;;;;;;;;;;;;;;;;;;;;;;
(defmacro print-js-code-from-tree (lisp-form)
  `(build-js-aux ',lisp-form))

(defun print-js-aux (tree &optional prev-rule)
  (if (not (listp tree))
      tree
      (let ((root (car tree)))
        (case root
          (:js
           (mapcar #'print-js-aux (cdr tree)))
          (:single-comment
           (destructuring-bind (comment) (cdr tree)
             (format *stream* "//~a~%" comment)))
          (:multi-comment
           (destructuring-bind (comment) (cdr tree)
             (format *stream* "/*~%~a~%*/~%" comment)))
          (:strict-mode
           (destructuring-bind () (cdr tree)
             (format *stream* "'use strict'~%")))
          ((:const :let :var)
           (destructuring-bind (storage-location-name &optional as-expr) (cdr tree)
             (format *stream* "~a ~a~a"
                     (to-string root)
                     storage-location-name
                     (if as-expr
                         (let ((*stream* nil))
                           (format nil " = ~a;" (print-js-aux as-expr)))
                         ";"))))
          (:fun-call
           (destructuring-bind (fun-name args) (cdr tree)
             (format *stream* "~a(~a)"
                     fun-name
                     (let ((*stream* nil))
                       (print-js-aux args)))))
          (:args
           (destructuring-bind (&rest args) (cdr tree)
             (format *stream* "~{~a~^, ~}"
                     (mapcar #'print-js-aux args))))
          (:new-instance
           (destructuring-bind (fun-call-expr) (cdr tree)
             ))
          (:expr-chain
           (destructuring-bind () (cdr tree)
             ))
          (t (error "Unknown rule ~a" root))))))



;;example

;; ((:multi-comment "Source code of bot generated by NOBOT")
;;  (:strict-mode)
;;  (:const
;;   "wisteria"
;;   (:fun-call
;;    "require"
;;    (:args
;;     "./wisteria")))
;;  (:const
;;   "botOptions"
;;   (:new-instance
;;    (:expr-chain
;;     "wisteria"
;;     (:fun-call
;;      "BotOptions"
;;      (:args
;;       "TestBot"
;;       "8082"
;;       "localhost")))))
;;  (:const
;;   "bot"
;;   (:new-instance
;;    (:expr-chain
;;     "wisteria"
;;     (:fun-call
;;      "Bot"
;;      (:args
;;       "botOptions"))))))
